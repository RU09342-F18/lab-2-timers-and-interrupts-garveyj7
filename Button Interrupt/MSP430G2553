/*
 * MSP430G2553_ButtonInterrupt.c
 *
 *  Created on: Sep 22, 2018
 *  Last Edited: Sept 28, 2018
 *      Author: John Garvey
 */

#include <msp430.h> 

// Define LEDs on their corresponding bits for easier controler later on in the code
#define GRNLED BIT0
#define REDLED BIT6

int main(void)
{
    // Stop watchdog timer
    WDTCTL = WDTPW | WDTHOLD;
    // Sets Pins 1.0 and 1.6 to be outputs
    P1DIR |= (GRNLED | REDLED);
    // Sets Pin 1.3 to be pull up/down enabled
    P1REN |= BIT3;
    // Sets Pin 1.3 to pull up resistor
    P1OUT |= BIT3;

    // Set REDLED on and GRNLED off initially
    P1OUT |= REDLED;
    P1OUT &= ~GRNLED;

    // Enables interrupt on button
    P1IE |= BIT3;
    // Enables high - to - low behavior on interrupt
    P1IES |= BIT3;

    // CCR0 interrupt enabled
    CCTL0 = CCIE;
    //Sets frequency
    CCR0 =  50000;

    // SMCLK selected, Continuous enabled Divider = 4
    TACTL = TASSEL_2 + MC_1 + ID_3;

    // Enable interrupts
    __enable_interrupt();
    
    // Loop infinitely
    while (1){}
}

// Timer Interrupt
#pragma vector = TIMER0_A0_VECTOR
    __interrupt void Timer_A ()
    {
        // Toggle LEDs
        P1OUT ^= (GRNLED | REDLED);
    }

// Button press Interrupt
#pragma vector = PORT1_VECTOR
__interrupt void Port_1(void)
{
    // Increments CCR0 by 1/3rd of 0xFFFF, for low, med, and high setting
    CCR0 -= 21845;
    // Remove flag
    P1IFG &= ~BIT3;
}
