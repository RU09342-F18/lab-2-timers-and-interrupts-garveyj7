/*
 * MSP430G2553_ButtonBasedDelay.c
 *
 *  Created on: Sep 23, 2018
 *  Last Edited: Sept 28, 2018
 *      Author: John Garvey
 */

#include <msp430.h> 

// Define LED for easier referencing in code
#define LED BIT0

int main(void)
{
    // stop watchdog timer
    WDTCTL = WDTPW | WDTHOLD;
    
    // Enable internal oscillator for clock
    BCSCTL3 = LFXT1S_2;

    // Sets LED as an output
    P1DIR |= LED;
    // Sets Pin 1.3 to be pull up/down enabled
    P1REN |= BIT3;
    // Sets Pin 1.3 to pull up resistor
    P1OUT |= BIT3;

    // Enable interrupt on button
    P1IE |= BIT3;
    // Enable high to low on interrupt
    P1IES |= BIT3;

    // CCR0 interrupt enabled
    CCTL0 = CCIE;
    // Sets initial blink frequency
    CCR0 =  100;
    // SMCLK selected + Up mode + Input divider -> divide clock by 4
    TACTL = TASSEL_1 + MC_1 + ID_3;

    // Enable interrupts
     __enable_interrupt();
    // Loop infinitely
    while (1){}
}
//Timer Interrupt
#pragma vector = TIMER0_A0_VECTOR
__interrupt void Timer_A ()
{
    // Toggle led output
    P1OUT ^= LED;
}

// Button press interrupt
#pragma vector=PORT1_VECTOR
__interrupt void Port_1(void)
{
    if (P1IES & BIT3)
    {
        // Clear timer A
        TACTL = TACLR;
        // Timer A = A clock + Continuous mode + Divide clock by 4
        TACTL = TASSEL_1 + MC_2 + ID_3;
        // Disable interrupt enable
        P1IES &= ~BIT3;
    }
    else
    {
        // Sync CCR0 with TA0R clock
        CCR0 = TA0R;
        // TImer A = A clock + Up mode, Divide clock by 4
        TACTL = TASSEL_1 + MC_1 + ID_3;
        // Enable interrupt enable
        P1IES |= BIT3;
    }
    // Clear interrupt flag
    P1IFG &= ~BIT3;
}
